host( "ext/pureruby/oga/native/lexer.rl", 1 ) @{}@host( "ext/pureruby/oga/native/lexer.rl", 1 ) @{

#
# Lexer support class for Ruby.
#
# The Lexer class contains the raw Ragel loop and calls back in to Ruby land
# whenever a Ragel action is needed similar to the C extension setup.
#
# This class requires Ruby land to first define the `Oga::XML` namespace.
#
module Oga
  module XML
    class Lexer
      }@
array char _ruby_lexer_trans_keys( 0, 42 ) = { 1, 0, 7, 32, 7, 7, 23, 23, 17, 31, 26, 40, 28, 42, 24, 37, 19, 33, 1, 3, 17, 17, 18, 18, 15, 15, 26, 26, 15, 15, 29, 29, 0, 41, 0, 30, 13, 13, 13, 13, 0, 30, 0, 30, 39, 39, 31, 31, 38, 38, 34, 34, 37, 37, 40, 40, 13, 13, 39, 39, 40, 40, 42, 42, 35, 35, 33, 33, 13, 13, 11, 11, 0, 30, 1, 3, 0, 30, 0, 30, 0, 36, 0, 35, 7, 7, 7, 7, 7, 7, 30, 30, 30, 30, 30, 30, 14, 14, 14, 14, 13, 13, 6, 6, 6, 6, 5, 5, 5, 5, 30, 30, 30, 30, 0, 39, 0, 30, 2, 2, 0, 30, 0, 30, 0, 35, 0, 34, 0, 31, 0, 42, 0, 39, 0, 40, 0, 33, 0, 36, 0, 30, 0, 30, 13, 13, 0, 30, 0, 30, 0, 30, 0, 30, 1, 6, 2, 2, 1, 13, 1, 13, 5, 6, 0, 30, 0, 30, 2, 2, 13, 13, 0, 30, 0, 30, 0, 30, 0, 30, 0, 30, 2, 2, 13, 13, 0, 30, 0, 30, 0, 30, 11, 11, 11, 11, 0, 30, 0, 30, 11, 11, 11, 11, 9, 11, 11, 11, 11, 11, 11, 11, 9, 11, 11, 11, 0 };

array s8 _ruby_lexer_char_class( 0, 42 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 5, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 7, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 0, 11, 12, 13, 14, 0, 15, 16, 17, 18, 19, 8, 8, 8, 20, 8, 8, 21, 22, 8, 23, 24, 8, 8, 25, 26, 27, 8, 8, 8, 28, 8, 29, 0, 30, 0, 8, 0, 8, 16, 31, 32, 33, 8, 8, 8, 34, 8, 8, 35, 36, 8, 23, 37, 8, 38, 39, 40, 27, 8, 8, 41, 42, 8, 0, 0, 0, 0, 0, 0 };

array s16 _ruby_lexer_index_offsets( 0, 1489 ) = { 0, 0, 26, 27, 28, 43, 58, 73, 87, 102, 105, 106, 107, 108, 109, 110, 111, 153, 184, 185, 186, 217, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 293, 296, 327, 358, 395, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 486, 517, 518, 549, 580, 616, 651, 683, 726, 766, 807, 841, 878, 909, 940, 941, 972, 1003, 1034, 1065, 1071, 1072, 1085, 1098, 1100, 1131, 1162, 1163, 1164, 1195, 1226, 1257, 1288, 1319, 1320, 1321, 1352, 1383, 1414, 1415, 1416, 1447, 1478, 1479, 1480, 1483, 1484, 1485, 1486, 1489, 0 };

array s16 _ruby_lexer_indicies( 0, 195 ) = { 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 3, 5, 6, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 12, 12, 12, 13, 14, 15, 16, 17, 18, 1, 1, 1, 1, 1, 1, 1, 19, 19, 1, 1, 1, 1, 1, 1, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 1, 1, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 21, 21, 24, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 27, 27, 29, 29, 29, 29, 29, 29, 29, 30, 30, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 29, 29, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 49, 49, 49, 49, 51, 49, 49, 50, 50, 52, 49, 49, 49, 49, 53, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 49, 49, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 19, 19, 21, 55, 21, 21, 21, 21, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 21, 21, 56, 56, 56, 56, 56, 56, 56, 22, 22, 56, 56, 56, 56, 56, 56, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 56, 56, 56, 56, 56, 56, 56, 56, 56, 19, 19, 56, 55, 56, 56, 56, 56, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 56, 56, 19, 19, 19, 19, 19, 57, 56, 56, 56, 56, 56, 56, 56, 19, 19, 56, 55, 56, 56, 56, 56, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 56, 56, 19, 19, 19, 19, 58, 61, 62, 63, 66, 67, 68, 71, 72, 73, 76, 77, 80, 81, 84, 85, 0, 88, 89, 90, 0, 91, 92, 87, 87, 0, 0, 0, 0, 93, 0, 87, 87, 87, 87, 87, 87, 87, 87, 87, 94, 95, 87, 87, 87, 96, 0, 87, 87, 87, 87, 87, 87, 94, 87, 95, 97, 97, 97, 97, 97, 97, 97, 87, 87, 97, 97, 97, 97, 97, 97, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 97, 97, 89, 99, 99, 99, 99, 99, 99, 99, 87, 87, 99, 99, 99, 99, 99, 99, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 100, 87, 99, 99, 99, 99, 99, 99, 99, 99, 99, 87, 87, 99, 99, 99, 99, 99, 99, 87, 101, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 99, 99, 99, 99, 99, 99, 99, 99, 99, 87, 87, 99, 99, 99, 99, 99, 99, 87, 87, 87, 87, 87, 87, 102, 87, 87, 87, 87, 87, 87, 87, 99, 99, 87, 87, 87, 87, 102, 99, 99, 99, 99, 99, 99, 99, 87, 87, 99, 99, 99, 99, 99, 99, 87, 87, 87, 87, 87, 103, 87, 87, 87, 87, 87, 87, 87, 87, 99, 99, 87, 87, 87, 103, 99, 99, 99, 99, 99, 99, 99, 87, 87, 99, 99, 99, 99, 99, 99, 87, 87, 104, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 99, 99, 104, 99, 99, 99, 99, 99, 99, 99, 87, 87, 99, 99, 99, 99, 99, 99, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 105, 99, 99, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 105, 99, 99, 99, 99, 99, 99, 99, 87, 87, 99, 99, 99, 99, 99, 99, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 106, 87, 87, 87, 99, 99, 87, 87, 87, 87, 87, 87, 87, 87, 106, 99, 99, 99, 99, 99, 99, 99, 87, 87, 99, 99, 99, 99, 99, 99, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 107, 87, 87, 99, 99, 87, 87, 87, 87, 87, 87, 87, 87, 87, 107, 99, 99, 99, 99, 99, 99, 99, 87, 87, 99, 99, 99, 99, 99, 99, 87, 87, 87, 87, 108, 87, 87, 87, 87, 87, 87, 87, 87, 87, 99, 99, 87, 87, 108, 99, 99, 99, 99, 99, 99, 99, 87, 87, 99, 99, 99, 99, 99, 99, 87, 87, 87, 87, 87, 87, 87, 104, 87, 87, 87, 87, 87, 87, 99, 99, 87, 87, 87, 87, 87, 104, 111, 111, 111, 111, 111, 112, 113, 110, 110, 111, 111, 111, 111, 111, 114, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 111, 111, 115, 115, 115, 115, 115, 115, 115, 116, 116, 115, 115, 115, 115, 115, 115, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 115, 115, 118, 0, 0, 0, 0, 0, 0, 0, 120, 120, 0, 0, 0, 0, 0, 0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 0, 0, 121, 121, 121, 121, 121, 121, 121, 120, 120, 121, 122, 121, 121, 121, 121, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 121, 121, 125, 125, 125, 125, 125, 125, 125, 124, 124, 125, 125, 125, 125, 126, 125, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 125, 125, 127, 127, 127, 127, 127, 127, 127, 128, 128, 127, 129, 127, 127, 127, 127, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 127, 132, 132, 133, 131, 134, 134, 132, 138, 138, 138, 137, 137, 137, 137, 137, 137, 137, 137, 137, 138, 139, 139, 139, 137, 137, 137, 137, 137, 137, 137, 137, 137, 139, 142, 143, 146, 146, 147, 148, 146, 146, 146, 145, 145, 149, 146, 150, 151, 152, 146, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 146, 146, 153, 153, 153, 153, 153, 153, 153, 145, 145, 153, 154, 153, 153, 153, 153, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 153, 153, 147, 157, 156, 156, 156, 156, 156, 156, 156, 158, 158, 156, 156, 156, 156, 156, 156, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 156, 156, 159, 159, 159, 159, 159, 159, 159, 158, 158, 159, 160, 159, 159, 159, 159, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 159, 159, 159, 159, 159, 159, 159, 159, 159, 28, 28, 159, 159, 159, 159, 159, 159, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 159, 159, 163, 163, 164, 165, 163, 163, 163, 162, 162, 166, 162, 167, 168, 169, 163, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 163, 163, 170, 170, 170, 170, 170, 170, 170, 162, 162, 170, 162, 170, 170, 170, 170, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 170, 170, 164, 173, 172, 172, 172, 172, 172, 172, 172, 174, 174, 172, 172, 172, 172, 172, 172, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 172, 172, 175, 175, 175, 175, 175, 175, 175, 174, 174, 175, 176, 175, 175, 175, 175, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 175, 175, 175, 175, 175, 175, 175, 175, 175, 30, 30, 175, 175, 175, 175, 175, 175, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 175, 175, 179, 181, 178, 178, 178, 178, 182, 178, 178, 182, 182, 182, 178, 181, 178, 178, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 178, 178, 178, 178, 178, 178, 183, 178, 178, 183, 183, 183, 178, 181, 178, 178, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 178, 178, 186, 187, 188, 187, 189, 189, 192, 193, 194, 193, 195, 195, 0 };

array s16 _ruby_lexer_index_defaults( 0, 193 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19, 22, 23, 25, 28, 30, 31, 31, 31, 31, 31, 31, 31, 39, 39, 39, 39, 39, 39, 47, 50, 54, 19, 22, 19, 19, 60, 60, 62, 65, 65, 67, 70, 70, 72, 75, 75, 79, 79, 83, 83, 87, 87, 98, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 110, 116, 117, 120, 120, 124, 128, 131, 135, 137, 137, 141, 145, 145, 155, 156, 158, 158, 28, 162, 162, 171, 172, 174, 174, 30, 178, 178, 182, 183, 185, 185, 187, 187, 191, 191, 193, 193, 0 };

array s8 _ruby_lexer_cond_targs( 0, 107 ) = { 0, 35, 2, 3, 10, 35, 4, 5, 6, 7, 8, 9, 37, 11, 12, 13, 14, 15, 35, 38, 40, 35, 39, 42, 42, 45, 45, 82, 88, 89, 95, 100, 23, 24, 25, 26, 27, 28, 100, 104, 30, 31, 32, 33, 34, 104, 35, 35, 36, 35, 35, 1, 35, 16, 35, 17, 35, 41, 38, 42, 43, 44, 42, 18, 45, 46, 47, 45, 19, 48, 49, 50, 48, 48, 51, 52, 51, 51, 53, 54, 53, 53, 55, 56, 55, 55, 57, 58, 57, 57, 59, 57, 57, 57, 60, 65, 57, 57, 57, 57, 61, 62, 63, 64, 58, 66, 67, 68, 69, 70, 71, 70, 70, 70, 72, 70, 71, 70, 70, 73, 74, 73, 73, 75, 76, 75, 75, 75, 76, 75, 77, 77, 77, 78, 77, 77, 79, 80, 79, 79, 81, 81, 81, 81, 82, 83, 82, 82, 84, 85, 86, 82, 82, 82, 82, 82, 82, 82, 87, 82, 20, 89, 90, 89, 89, 91, 92, 93, 89, 89, 89, 89, 89, 89, 94, 89, 21, 96, 97, 99, 96, 98, 96, 96, 100, 101, 102, 100, 22, 103, 104, 105, 106, 104, 29, 107, 0 };

array s8 _ruby_lexer_cond_actions( 0, 94 ) = { 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 4, 5, 5, 6, 0, 7, 8, 9, 10, 11, 0, 12, 0, 13, 0, 0, 0, 0, 0, 0, 14, 15, 0, 0, 0, 0, 0, 16, 0, 19, 20, 21, 22, 0, 23, 0, 24, 0, 25, 5, 26, 0, 3, 27, 28, 0, 0, 3, 27, 29, 0, 0, 3, 3, 30, 31, 0, 3, 32, 33, 0, 3, 34, 35, 0, 3, 36, 37, 0, 38, 39, 40, 0, 41, 42, 43, 0, 0, 44, 45, 46, 47, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 3, 49, 50, 51, 3, 52, 0, 53, 54, 0, 0, 55, 56, 0, 3, 57, 58, 59, 0, 60, 0, 61, 62, 3, 63, 64, 0, 0, 65, 66, 0, 67, 68, 69, 0, 0, 70, 71, 0, 0, 0, 72, 73, 74, 75, 76, 77, 78, 20, 79, 0, 0, 0, 80, 81, 0, 0, 0, 82, 83, 84, 85, 86, 87, 20, 88, 0, 0, 3, 89, 90, 89, 91, 92, 0, 3, 27, 93, 0, 3, 0, 3, 27, 94, 0, 3, 0 };

array s8 _ruby_lexer_to_state_actions( 0, 17 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 17, 0, 0, 17, 0, 0, 17, 0, 0, 17, 0, 17, 0, 17, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 17, 0, 17, 0, 17, 0, 17, 0, 17, 17, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 17, 0, 0, 0, 17, 0, 0, 0, 0 };

array s8 _ruby_lexer_from_state_actions( 0, 18 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 18, 0, 0, 18, 0, 0, 18, 0, 0, 18, 0, 18, 0, 18, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 18, 0, 18, 0, 18, 0, 18, 0, 18, 18, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 18, 0, 0, 0, 18, 0, 0, 0, 0 };

array s16 _ruby_lexer_eof_trans( 0, 194 ) = { 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 22, 24, 26, 28, 30, 32, 32, 32, 32, 32, 32, 32, 40, 40, 40, 40, 40, 40, 47, 50, 55, 22, 57, 57, 57, 60, 63, 63, 65, 68, 68, 70, 73, 73, 75, 78, 79, 82, 83, 86, 87, 98, 99, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 110, 116, 118, 120, 122, 124, 128, 131, 136, 137, 140, 141, 145, 154, 156, 157, 157, 160, 160, 162, 171, 172, 173, 173, 176, 176, 178, 181, 181, 181, 185, 188, 188, 188, 191, 194, 194, 194, 0 };

value int ruby_lexer_start = 35;
value int ruby_lexer_error = 0;

value int ruby_lexer_en_comment_body = 42;
value int ruby_lexer_en_cdata_body = 45;
value int ruby_lexer_en_proc_ins_body = 48;
value int ruby_lexer_en_string_squote = 51;
value int ruby_lexer_en_string_dquote = 53;
value int ruby_lexer_en_doctype_inline = 55;
value int ruby_lexer_en_doctype = 57;
value int ruby_lexer_en_xml_decl = 70;
value int ruby_lexer_en_element_name = 73;
value int ruby_lexer_en_element_close = 75;
value int ruby_lexer_en_attribute_pre = 77;
value int ruby_lexer_en_unquoted_attribute_value = 79;
value int ruby_lexer_en_quoted_attribute_value = 81;
value int ruby_lexer_en_element_head = 82;
value int ruby_lexer_en_html_element_head = 89;
value int ruby_lexer_en_text = 96;
value int ruby_lexer_en_html_script = 100;
value int ruby_lexer_en_html_style = 104;
value int ruby_lexer_en_main = 35;

host( "ext/pureruby/oga/native/lexer.rl", 14 ) @{

      # Runs the bulk of the Ragel loop and calls back in to Ruby.
      #
      # This method pulls its data in from the instance variable `@@data`. The
      # Ruby side of the Lexer class should set this variable to a String in its
      # constructor method. Encodings are passed along to make sure that token
      # values share the same encoding as the input.
      #
      # This method always returns nil.
    
      def advance_native(rb_str)
        html_p = html?

        encoding = rb_str.encoding

        data  = rb_str.chars.map(&:ord)
        ts    = 0
        te    = 0
        p     = 0
        mark  = 0
        lines = @@lines || 0
        pe    = data.length
        eof   = data.length

        id_advance_line        = "advance_line"
        id_on_attribute        = "on_attribute"
        id_on_attribute_ns     = "on_attribute_ns"
        id_on_cdata_start      = "on_cdata_start"
        id_on_cdata_body       = "on_cdata_body"
        id_on_cdata_end        = "on_cdata_end"
        id_on_comment_start    = "on_comment_start"
        id_on_comment_body     = "on_comment_body"
        id_on_comment_end      = "on_comment_end"
        id_on_doctype_end      = "on_doctype_end"
        id_on_doctype_inline   = "on_doctype_inline"
        id_on_doctype_name     = "on_doctype_name"
        id_on_doctype_start    = "on_doctype_start"
        id_on_doctype_type     = "on_doctype_type"
        id_on_element_end      = "on_element_end"
        id_on_element_name     = "on_element_name"
        id_on_element_ns       = "on_element_ns"
        id_on_element_open_end = "on_element_open_end"
        id_on_proc_ins_end     = "on_proc_ins_end"
        id_on_proc_ins_name    = "on_proc_ins_name"
        id_on_proc_ins_start   = "on_proc_ins_start"
        id_on_proc_ins_body    = "on_proc_ins_body"
        id_on_string_body      = "on_string_body"
        id_on_string_dquote    = "on_string_dquote"
        id_on_string_squote    = "on_string_squote"
        id_on_text             = "on_text"
        id_on_xml_decl_end     = "on_xml_decl_end"
        id_on_xml_decl_start   = "on_xml_decl_start"

        }@
	{
	uint _trans = 0;
	index char  _keys;
	index s16  _inds;
	int _ic;
	while ( p != pe || p == eof ) {
		switch ( _ruby_lexer_from_state_actions[host( "-", 1 ) ={ @@cs}=] ) {
			case 18 {
					host( "NONE", 1 ) ${${ts = p;}$}$
				
				
				
			}
		}
		
		if ( p == eof ) {
			if ( _ruby_lexer_eof_trans[host( "-", 1 ) ={ @@cs}=] > 0 ) {
				_trans = cast(uint)_ruby_lexer_eof_trans[host( "-", 1 ) ={ @@cs}=] - 1;
			}
		}
		else {
			_keys = offset( _ruby_lexer_trans_keys, (host( "-", 1 ) ={ @@cs}=<<1) );
			_inds = offset( _ruby_lexer_indicies, _ruby_lexer_index_offsets[host( "-", 1 ) ={ @@cs}=] );
			
			if ( ( deref( data, p )) >= 0 ) {
				_ic = cast(int)_ruby_lexer_char_class[cast(int)( deref( data, p )) - 0];
				if ( _ic <= cast(int)deref( _ruby_lexer_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _ruby_lexer_trans_keys, _keys ) )
					_trans = cast(uint)deref( _ruby_lexer_indicies, _inds + cast(int)( _ic - cast(int)deref( _ruby_lexer_trans_keys, _keys ) )  ); 
				else
					_trans = cast(uint)_ruby_lexer_index_defaults[host( "-", 1 ) ={ @@cs}=];
			}
			else {
				_trans = cast(uint)_ruby_lexer_index_defaults[host( "-", 1 ) ={ @@cs}=];
			}
			
		}
		host( "-", 1 ) ={ @@cs}= = cast(int)_ruby_lexer_cond_targs[_trans];
		
		if ( _ruby_lexer_cond_actions[_trans] != 0 ) {
			
			switch ( _ruby_lexer_cond_actions[_trans] ) {
				case 3 {
						host( "ext/ragel/base_lexer_rubified.rl", 61 ) ${
        
        if  ={( deref( data, p ))}= == 10 
lines += 1
end
    }$
					
					
					
				}
				case 20 {
						host( "NONE", 1 ) ${${te = p+1;}$}$
					
					
					
				}
				case 8 {
						host( "ext/ragel/base_lexer_rubified.rl", 111 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 111 ) ${
            callback_simple(id_on_comment_end);

            ${host( "-", 1 ) ={ @@cs}= = 35;}$}$}$}$
					
					
					
				}
				case 28 {
						host( "ext/ragel/base_lexer_rubified.rl", 99 ) ${${te = p;p = p - 1;host( "ext/ragel/base_lexer_rubified.rl", 99 ) ${
            callback(id_on_comment_body, data, encoding, ts, te);

            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end
        }$}$}$
					
					
					
				}
				case 7 {
						host( "ext/ragel/base_lexer_rubified.rl", 99 ) ${${p = ((te))-1;
							host( "ext/ragel/base_lexer_rubified.rl", 99 ) ${
            callback(id_on_comment_body, data, encoding, ts, te);

            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end
        }$}$}$
					
					
					
				}
				case 10 {
						host( "ext/ragel/base_lexer_rubified.rl", 151 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 151 ) ${
            callback_simple(id_on_cdata_end);

            ${host( "-", 1 ) ={ @@cs}= = 35;}$}$}$}$
					
					
					
				}
				case 29 {
						host( "ext/ragel/base_lexer_rubified.rl", 139 ) ${${te = p;p = p - 1;host( "ext/ragel/base_lexer_rubified.rl", 139 ) ${
            callback(id_on_cdata_body, data, encoding, ts, te);

            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end
        }$}$}$
					
					
					
				}
				case 9 {
						host( "ext/ragel/base_lexer_rubified.rl", 139 ) ${${p = ((te))-1;
							host( "ext/ragel/base_lexer_rubified.rl", 139 ) ${
            callback(id_on_cdata_body, data, encoding, ts, te);

            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end
        }$}$}$
					
					
					
				}
				case 31 {
						host( "ext/ragel/base_lexer_rubified.rl", 195 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 195 ) ${
            callback_simple(id_on_proc_ins_end);

            ${host( "-", 1 ) ={ @@cs}= = 35;}$}$}$}$
					
					
					
				}
				case 30 {
						host( "ext/ragel/base_lexer_rubified.rl", 183 ) ${${te = p;p = p - 1;host( "ext/ragel/base_lexer_rubified.rl", 183 ) ${
            callback(id_on_proc_ins_body, data, encoding, ts, te);

            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end
        }$}$}$
					
					
					
				}
				case 32 {
						host( "ext/ragel/base_lexer_rubified.rl", 238 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 238 ) ${
            callback_simple(id_on_string_squote);

            ${host( "-", 1 ) ={ @@top}= -= 1;host( "-", 1 ) ={ @@cs}= = host( "-", 1 ) ={ @@stack}=[host( "-", 1 ) ={ @@top}=];if ( TRUE ) break _again;}$
        }$}$}$
					
					
					
				}
				case 33 {
						host( "ext/ragel/base_lexer_rubified.rl", 211 ) ${${te = p;p = p - 1;host( "ext/ragel/base_lexer_rubified.rl", 211 ) ${
        callback(id_on_string_body, data, encoding, ts, te);

        if  lines > 0 

            advance_line(lines);

            lines = 0;
        
end
    }$}$}$
					
					
					
				}
				case 34 {
						host( "ext/ragel/base_lexer_rubified.rl", 248 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 248 ) ${
            callback_simple(id_on_string_dquote);

            ${host( "-", 1 ) ={ @@top}= -= 1;host( "-", 1 ) ={ @@cs}= = host( "-", 1 ) ={ @@stack}=[host( "-", 1 ) ={ @@top}=];if ( TRUE ) break _again;}$
        }$}$}$
					
					
					
				}
				case 35 {
						host( "ext/ragel/base_lexer_rubified.rl", 211 ) ${${te = p;p = p - 1;host( "ext/ragel/base_lexer_rubified.rl", 211 ) ${
        callback(id_on_string_body, data, encoding, ts, te);

        if  lines > 0 

            advance_line(lines);

            lines = 0;
        
end
    }$}$}$
					
					
					
				}
				case 36 {
						host( "ext/ragel/base_lexer_rubified.rl", 295 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 295 ) ${ ${host( "-", 1 ) ={ @@cs}= = 57;}$}$}$}$
					
					
					
				}
				case 37 {
						host( "ext/ragel/base_lexer_rubified.rl", 283 ) ${${te = p;p = p - 1;host( "ext/ragel/base_lexer_rubified.rl", 283 ) ${
            callback(id_on_doctype_inline, data, encoding, ts, te);

            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end
        }$}$}$
					
					
					
				}
				case 44 {
						host( "ext/ragel/base_lexer_rubified.rl", 306 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 306 ) ${ ${host( "-", 1 ) ={ @@cs}= = 55;}$}$}$}$
					
					
					
				}
				case 42 {
						host( "ext/ragel/base_lexer_rubified.rl", 223 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 223 ) ${
        callback_simple(id_on_string_squote);

        ${host( "-", 1 ) ={ @@stack}=[host( "-", 1 ) ={ @@top}=] = host( "-", 1 ) ={ @@cs}=; host( "-", 1 ) ={ @@top}= += 1;host( "-", 1 ) ={ @@cs}= = 51;if ( TRUE ) break _again;}$}$}$}$
					
					
					
				}
				case 41 {
						host( "ext/ragel/base_lexer_rubified.rl", 229 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 229 ) ${
        callback_simple(id_on_string_dquote);

        ${host( "-", 1 ) ={ @@stack}=[host( "-", 1 ) ={ @@top}=] = host( "-", 1 ) ={ @@cs}=; host( "-", 1 ) ={ @@top}= += 1;host( "-", 1 ) ={ @@cs}= = 53;if ( TRUE ) break _again;}$}$}$}$
					
					
					
				}
				case 43 {
						host( "ext/ragel/base_lexer_rubified.rl", 316 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 316 ) ${
            callback_simple(id_on_doctype_end);
            ${host( "-", 1 ) ={ @@cs}= = 35;}$}$}$}$
					
					
					
				}
				case 40 {
						host( "ext/ragel/base_lexer_rubified.rl", 68 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 68 ) ${
        advance_line(1);
    }$}$}$
					
					
					
				}
				case 39 {
						host( "-", 1 ) ${${te = p+1;}$}$
					
					
					
				}
				case 47 {
						host( "ext/ragel/base_lexer_rubified.rl", 312 ) ${${te = p;p = p - 1;host( "ext/ragel/base_lexer_rubified.rl", 312 ) ${
            callback(id_on_doctype_name, data, encoding, ts, te);
        }$}$}$
					
					
					
				}
				case 46 {
						host( "ext/ragel/base_lexer_rubified.rl", 68 ) ${${te = p;p = p - 1;host( "ext/ragel/base_lexer_rubified.rl", 68 ) ${
        advance_line(1);
    }$}$}$
					
					
					
				}
				case 45 {
						host( "NONE", 1 ) ${${switch( host( "-", 1 ) ={ @@act}= ) {
								case 13 {
									p = ((te))-1;
									host( "ext/ragel/base_lexer_rubified.rl", 301 ) ${
            callback(id_on_doctype_type, data, encoding, ts, te);
        }$ 
								}
								case 17 {
									p = ((te))-1;
									host( "ext/ragel/base_lexer_rubified.rl", 312 ) ${
            callback(id_on_doctype_name, data, encoding, ts, te);
        }$ 
								}
							}}$
					}$
					
					
					
				}
				case 54 {
						host( "ext/ragel/base_lexer_rubified.rl", 340 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 340 ) ${
            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end

            callback_simple(id_on_xml_decl_end);

            ${host( "-", 1 ) ={ @@cs}= = 35;}$}$}$}$
					
					
					
				}
				case 52 {
						host( "ext/ragel/base_lexer_rubified.rl", 355 ) ${${te = p;p = p - 1;host( "ext/ragel/base_lexer_rubified.rl", 355 ) ${
            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end

            callback(id_on_attribute, data, encoding, ts, te);
        }$}$}$
					
					
					
				}
				case 53 {
						host( "-", 1 ) ${${te = p;p = p - 1;}$}$
					
					
					
				}
				case 56 {
						host( "ext/ragel/base_lexer_rubified.rl", 407 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 407 ) ${
            if  !html_p 

                callback(id_on_element_ns, data, encoding, ts, te - 1);
            
end
        }$}$}$
					
					
					
				}
				case 55 {
						host( "ext/ragel/base_lexer_rubified.rl", 415 ) ${${te = p;p = p - 1;host( "ext/ragel/base_lexer_rubified.rl", 415 ) ${
            callback(id_on_element_name, data, encoding, ts, te);

            if  html_p 

                ${host( "-", 1 ) ={ @@cs}= = 89;}$else

                ${host( "-", 1 ) ={ @@cs}= = 82;}$end
        }$}$}$
					
					
					
				}
				case 60 {
						host( "-", 1 ) ${${te = p+1;}$}$
					
					
					
				}
				case 59 {
						host( "ext/ragel/base_lexer_rubified.rl", 391 ) ${${te = p;p = p - 1;host( "ext/ragel/base_lexer_rubified.rl", 391 ) ${
        callback(id_on_element_end, data, encoding, ts, te);
    }$}$}$
					
					
					
				}
				case 63 {
						host( "ext/ragel/base_lexer_rubified.rl", 458 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 458 ) ${
            ${p = p - 1; }$

            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end

            ${host( "-", 1 ) ={ @@cs}= = 81;}$}$}$}$
					
					
					
				}
				case 61 {
						host( "ext/ragel/base_lexer_rubified.rl", 472 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 472 ) ${
            ${p = p - 1; }$

            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end

            if  html_p 

                ${host( "-", 1 ) ={ @@cs}= = 79;}$else

                ${host( "-", 1 ) ={ @@top}= -= 1;host( "-", 1 ) ={ @@cs}= = host( "-", 1 ) ={ @@stack}=[host( "-", 1 ) ={ @@top}=];if ( TRUE ) break _again;}$
            
end
        }$}$}$
					
					
					
				}
				case 64 {
						host( "-", 1 ) ${${te = p;p = p - 1;}$}$
					
					
					
				}
				case 65 {
						host( "ext/ragel/base_lexer_rubified.rl", 72 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 72 ) ${
        ${p = p - 1; }$
        ${host( "-", 1 ) ={ @@top}= -= 1;host( "-", 1 ) ={ @@cs}= = host( "-", 1 ) ={ @@stack}=[host( "-", 1 ) ={ @@top}=];if ( TRUE ) break _again;}$
    }$}$}$
					
					
					
				}
				case 66 {
						host( "ext/ragel/base_lexer_rubified.rl", 511 ) ${${te = p;p = p - 1;host( "ext/ragel/base_lexer_rubified.rl", 511 ) ${
            callback_simple(id_on_string_squote);

            callback(id_on_string_body, data, encoding, ts, te);

            callback_simple(id_on_string_squote);
        }$}$}$
					
					
					
				}
				case 69 {
						host( "ext/ragel/base_lexer_rubified.rl", 527 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 527 ) ${
            callback_simple(id_on_string_squote);

            ${host( "-", 1 ) ={ @@cs}= = 51;}$}$}$}$
					
					
					
				}
				case 68 {
						host( "ext/ragel/base_lexer_rubified.rl", 533 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 533 ) ${
            callback_simple(id_on_string_dquote);

            ${host( "-", 1 ) ={ @@cs}= = 53;}$}$}$}$
					
					
					
				}
				case 67 {
						host( "ext/ragel/base_lexer_rubified.rl", 72 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 72 ) ${
        ${p = p - 1; }$
        ${host( "-", 1 ) ={ @@top}= -= 1;host( "-", 1 ) ={ @@cs}= = host( "-", 1 ) ={ @@stack}=[host( "-", 1 ) ={ @@top}=];if ( TRUE ) break _again;}$
    }$}$}$
					
					
					
				}
				case 71 {
						host( "ext/ragel/base_lexer_rubified.rl", 68 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 68 ) ${
        advance_line(1);
    }$}$}$
					
					
					
				}
				case 75 {
						host( "ext/ragel/base_lexer_rubified.rl", 575 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 575 ) ${
            callback(id_on_attribute_ns, data, encoding, ts, te - 1);
        }$}$}$
					
					
					
				}
				case 72 {
						host( "ext/ragel/base_lexer_rubified.rl", 542 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 542 ) ${
        ${host( "-", 1 ) ={ @@stack}=[host( "-", 1 ) ={ @@top}=] = host( "-", 1 ) ={ @@cs}=; host( "-", 1 ) ={ @@top}= += 1;host( "-", 1 ) ={ @@cs}= = 77;if ( TRUE ) break _again;}$}$}$}$
					
					
					
				}
				case 73 {
						host( "ext/ragel/base_lexer_rubified.rl", 585 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 585 ) ${
            callback_simple(id_on_element_open_end);

            ${host( "-", 1 ) ={ @@cs}= = 35;}$}$}$}$
					
					
					
				}
				case 78 {
						host( "ext/ragel/base_lexer_rubified.rl", 564 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 564 ) ${
        callback_simple(id_on_element_end);
        ${host( "-", 1 ) ={ @@cs}= = 35;}$}$}$}$
					
					
					
				}
				case 70 {
						host( "-", 1 ) ${${te = p+1;}$}$
					
					
					
				}
				case 76 {
						host( "ext/ragel/base_lexer_rubified.rl", 68 ) ${${te = p;p = p - 1;host( "ext/ragel/base_lexer_rubified.rl", 68 ) ${
        advance_line(1);
    }$}$}$
					
					
					
				}
				case 79 {
						host( "-", 1 ) ${${te = p;p = p - 1;}$}$
					
					
					
				}
				case 74 {
						host( "ext/ragel/base_lexer_rubified.rl", 579 ) ${${te = p;p = p - 1;host( "ext/ragel/base_lexer_rubified.rl", 579 ) ${
            callback(id_on_attribute, data, encoding, ts, te);
        }$}$}$
					
					
					
				}
				case 77 {
						host( "-", 1 ) ${${te = p;p = p - 1;}$}$
					
					
					
				}
				case 11 {
						host( "-", 1 ) ${${p = ((te))-1;
						}$}$
					
					
					
				}
				case 81 {
						host( "ext/ragel/base_lexer_rubified.rl", 68 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 68 ) ${
        advance_line(1);
    }$}$}$
					
					
					
				}
				case 82 {
						host( "ext/ragel/base_lexer_rubified.rl", 542 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 542 ) ${
        ${host( "-", 1 ) ={ @@stack}=[host( "-", 1 ) ={ @@top}=] = host( "-", 1 ) ={ @@cs}=; host( "-", 1 ) ={ @@top}= += 1;host( "-", 1 ) ={ @@cs}= = 77;if ( TRUE ) break _again;}$}$}$}$
					
					
					
				}
				case 83 {
						host( "ext/ragel/base_lexer_rubified.rl", 608 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 608 ) ${
            callback_simple(id_on_element_open_end);

            if  html_script_p() 

                ${host( "-", 1 ) ={ @@cs}= = 100;}$elsif  html_style_p() 

                ${host( "-", 1 ) ={ @@cs}= = 104;}$else

                ${host( "-", 1 ) ={ @@cs}= = 35;}$end
        }$}$}$
					
					
					
				}
				case 87 {
						host( "ext/ragel/base_lexer_rubified.rl", 564 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 564 ) ${
        callback_simple(id_on_element_end);
        ${host( "-", 1 ) ={ @@cs}= = 35;}$}$}$}$
					
					
					
				}
				case 80 {
						host( "-", 1 ) ${${te = p+1;}$}$
					
					
					
				}
				case 85 {
						host( "ext/ragel/base_lexer_rubified.rl", 68 ) ${${te = p;p = p - 1;host( "ext/ragel/base_lexer_rubified.rl", 68 ) ${
        advance_line(1);
    }$}$}$
					
					
					
				}
				case 88 {
						host( "-", 1 ) ${${te = p;p = p - 1;}$}$
					
					
					
				}
				case 84 {
						host( "ext/ragel/base_lexer_rubified.rl", 602 ) ${${te = p;p = p - 1;host( "ext/ragel/base_lexer_rubified.rl", 602 ) ${
            callback(id_on_attribute, data, encoding, ts, te);
        }$}$}$
					
					
					
				}
				case 86 {
						host( "-", 1 ) ${${te = p;p = p - 1;}$}$
					
					
					
				}
				case 12 {
						host( "-", 1 ) ${${p = ((te))-1;
						}$}$
					
					
					
				}
				case 92 {
						host( "ext/ragel/base_lexer_rubified.rl", 666 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 666 ) ${
            callback(id_on_text, data, encoding, ts, te);

            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end

            ${host( "-", 1 ) ={ @@cs}= = 35;}$}$}$}$
					
					
					
				}
				case 91 {
						host( "ext/ragel/base_lexer_rubified.rl", 681 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 681 ) ${
            callback(id_on_text, data, encoding, ts, mark);

            p    = mark - 1;
            mark = 0;

            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end

            ${host( "-", 1 ) ={ @@cs}= = 35;}$}$}$}$
					
					
					
				}
				case 90 {
						host( "ext/ragel/base_lexer_rubified.rl", 666 ) ${${te = p;p = p - 1;host( "ext/ragel/base_lexer_rubified.rl", 666 ) ${
            callback(id_on_text, data, encoding, ts, te);

            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end

            ${host( "-", 1 ) ={ @@cs}= = 35;}$}$}$}$
					
					
					
				}
				case 14 {
						host( "ext/ragel/base_lexer_rubified.rl", 395 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 395 ) ${
        callback_simple(id_on_element_end);

        ${host( "-", 1 ) ={ @@cs}= = 35;}$}$}$}$
					
					
					
				}
				case 93 {
						host( "ext/ragel/base_lexer_rubified.rl", 653 ) ${${te = p;p = p - 1;host( "ext/ragel/base_lexer_rubified.rl", 653 ) ${
        callback(id_on_text, data, encoding, ts, te);

        if  lines > 0 

            advance_line(lines);

            lines = 0;
        
end
    }$}$}$
					
					
					
				}
				case 13 {
						host( "ext/ragel/base_lexer_rubified.rl", 653 ) ${${p = ((te))-1;
							host( "ext/ragel/base_lexer_rubified.rl", 653 ) ${
        callback(id_on_text, data, encoding, ts, te);

        if  lines > 0 

            advance_line(lines);

            lines = 0;
        
end
    }$}$}$
					
					
					
				}
				case 16 {
						host( "ext/ragel/base_lexer_rubified.rl", 395 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 395 ) ${
        callback_simple(id_on_element_end);

        ${host( "-", 1 ) ={ @@cs}= = 35;}$}$}$}$
					
					
					
				}
				case 94 {
						host( "ext/ragel/base_lexer_rubified.rl", 653 ) ${${te = p;p = p - 1;host( "ext/ragel/base_lexer_rubified.rl", 653 ) ${
        callback(id_on_text, data, encoding, ts, te);

        if  lines > 0 

            advance_line(lines);

            lines = 0;
        
end
    }$}$}$
					
					
					
				}
				case 15 {
						host( "ext/ragel/base_lexer_rubified.rl", 653 ) ${${p = ((te))-1;
							host( "ext/ragel/base_lexer_rubified.rl", 653 ) ${
        callback(id_on_text, data, encoding, ts, te);

        if  lines > 0 

            advance_line(lines);

            lines = 0;
        
end
    }$}$}$
					
					
					
				}
				case 2 {
						host( "ext/ragel/base_lexer_rubified.rl", 92 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 92 ) ${
        callback_simple(id_on_comment_start);

        ${host( "-", 1 ) ={ @@cs}= = 42;}$}$}$}$
					
					
					
				}
				case 4 {
						host( "ext/ragel/base_lexer_rubified.rl", 132 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 132 ) ${
        callback_simple(id_on_cdata_start);

        ${host( "-", 1 ) ={ @@cs}= = 45;}$}$}$}$
					
					
					
				}
				case 22 {
						host( "ext/ragel/base_lexer_rubified.rl", 382 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 382 ) ${
        ${p = p - 1; }$
        ${host( "-", 1 ) ={ @@cs}= = 73;}$}$}$}$
					
					
					
				}
				case 23 {
						host( "ext/ragel/base_lexer_rubified.rl", 387 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 387 ) ${
        ${host( "-", 1 ) ={ @@cs}= = 75;}$}$}$}$
					
					
					
				}
				case 19 {
						host( "ext/ragel/base_lexer_rubified.rl", 639 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 639 ) ${
        ${p = p - 1; }$
        ${host( "-", 1 ) ={ @@cs}= = 96;}$}$}$}$
					
					
					
				}
				case 24 {
						host( "ext/ragel/base_lexer_rubified.rl", 267 ) ${${te = p;p = p - 1;host( "ext/ragel/base_lexer_rubified.rl", 267 ) ${
        callback_simple(id_on_doctype_start);

        if  lines > 0 

            advance_line(lines);

            lines = 0;
        
end

        ${host( "-", 1 ) ={ @@cs}= = 57;}$}$}$}$
					
					
					
				}
				case 25 {
						host( "ext/ragel/base_lexer_rubified.rl", 175 ) ${${te = p;p = p - 1;host( "ext/ragel/base_lexer_rubified.rl", 175 ) ${
        callback_simple(id_on_proc_ins_start);
        callback(id_on_proc_ins_name, data, encoding, ts + 2, te);

        ${host( "-", 1 ) ={ @@cs}= = 48;}$}$}$}$
					
					
					
				}
				case 21 {
						host( "ext/ragel/base_lexer_rubified.rl", 639 ) ${${te = p;p = p - 1;host( "ext/ragel/base_lexer_rubified.rl", 639 ) ${
        ${p = p - 1; }$
        ${host( "-", 1 ) ={ @@cs}= = 96;}$}$}$}$
					
					
					
				}
				case 1 {
						host( "ext/ragel/base_lexer_rubified.rl", 639 ) ${${p = ((te))-1;
							host( "ext/ragel/base_lexer_rubified.rl", 639 ) ${
        ${p = p - 1; }$
        ${host( "-", 1 ) ={ @@cs}= = 96;}$}$}$}$
					
					
					
				}
				case 6 {
						host( "NONE", 1 ) ${${switch( host( "-", 1 ) ={ @@act}= ) {
								case 62 {
									p = ((te))-1;
									host( "ext/ragel/base_lexer_rubified.rl", 333 ) ${
        callback_simple(id_on_xml_decl_start);
        ${host( "-", 1 ) ={ @@cs}= = 70;}$}$ 
								}
								case 65 {
									p = ((te))-1;
									host( "ext/ragel/base_lexer_rubified.rl", 175 ) ${
        callback_simple(id_on_proc_ins_start);
        callback(id_on_proc_ins_name, data, encoding, ts + 2, te);

        ${host( "-", 1 ) ={ @@cs}= = 48;}$}$ 
								}
							}}$
					}$
					
					
					
				}
				case 89 {
						host( "ext/ragel/base_lexer_rubified.rl", 61 ) ${
        
        if  ={( deref( data, p ))}= == 10 
lines += 1
end
    }$
					
						host( "ext/ragel/base_lexer_rubified.rl", 681 ) ${ mark = p; }$
					
					
					
				}
				case 49 {
						host( "ext/ragel/base_lexer_rubified.rl", 61 ) ${
        
        if  ={( deref( data, p ))}= == 10 
lines += 1
end
    }$
					
						host( "-", 1 ) ${${te = p+1;}$}$
					
					
					
				}
				case 57 {
						host( "ext/ragel/base_lexer_rubified.rl", 61 ) ${
        
        if  ={( deref( data, p ))}= == 10 
lines += 1
end
    }$
					
						host( "-", 1 ) ${${te = p+1;}$}$
					
					
					
				}
				case 62 {
						host( "ext/ragel/base_lexer_rubified.rl", 61 ) ${
        
        if  ={( deref( data, p ))}= == 10 
lines += 1
end
    }$
					
						host( "-", 1 ) ${${te = p+1;}$}$
					
					
					
				}
				case 27 {
						host( "NONE", 1 ) ${${te = p+1;}$}$
					
						host( "ext/ragel/base_lexer_rubified.rl", 61 ) ${
        
        if  ={( deref( data, p ))}= == 10 
lines += 1
end
    }$
					
					
					
				}
				case 48 {
						host( "NONE", 1 ) ${${te = p+1;}$}$
					
						host( "ext/ragel/base_lexer_rubified.rl", 301 ) ${${host( "-", 1 ) ={ @@act}= = 13;}$}$
					
					
					
				}
				case 38 {
						host( "NONE", 1 ) ${${te = p+1;}$}$
					
						host( "ext/ragel/base_lexer_rubified.rl", 312 ) ${${host( "-", 1 ) ={ @@act}= = 17;}$}$
					
					
					
				}
				case 26 {
						host( "NONE", 1 ) ${${te = p+1;}$}$
					
						host( "ext/ragel/base_lexer_rubified.rl", 333 ) ${${host( "-", 1 ) ={ @@act}= = 62;}$}$
					
					
					
				}
				case 5 {
						host( "NONE", 1 ) ${${te = p+1;}$}$
					
						host( "ext/ragel/base_lexer_rubified.rl", 175 ) ${${host( "-", 1 ) ={ @@act}= = 65;}$}$
					
					
					
				}
				case 51 {
						host( "ext/ragel/base_lexer_rubified.rl", 223 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 223 ) ${
        callback_simple(id_on_string_squote);

        ${host( "-", 1 ) ={ @@stack}=[host( "-", 1 ) ={ @@top}=] = host( "-", 1 ) ={ @@cs}=; host( "-", 1 ) ={ @@top}= += 1;host( "-", 1 ) ={ @@cs}= = 51;if ( TRUE ) break _again;}$}$}$}$
					
						host( "ext/ragel/base_lexer_rubified.rl", 61 ) ${
        
        if  ={( deref( data, p ))}= == 10 
lines += 1
end
    }$
					
					
					
				}
				case 50 {
						host( "ext/ragel/base_lexer_rubified.rl", 229 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 229 ) ${
        callback_simple(id_on_string_dquote);

        ${host( "-", 1 ) ={ @@stack}=[host( "-", 1 ) ={ @@top}=] = host( "-", 1 ) ={ @@cs}=; host( "-", 1 ) ={ @@top}= += 1;host( "-", 1 ) ={ @@cs}= = 53;if ( TRUE ) break _again;}$}$}$}$
					
						host( "ext/ragel/base_lexer_rubified.rl", 61 ) ${
        
        if  ={( deref( data, p ))}= == 10 
lines += 1
end
    }$
					
					
					
				}
				case 58 {
						host( "ext/ragel/base_lexer_rubified.rl", 438 ) ${${te = p+1;host( "ext/ragel/base_lexer_rubified.rl", 438 ) ${
            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end

            ${host( "-", 1 ) ={ @@cs}= = 35;}$}$}$}$
					
						host( "ext/ragel/base_lexer_rubified.rl", 61 ) ${
        
        if  ={( deref( data, p ))}= == 10 
lines += 1
end
    }$
					
					
					
				}
			}
			
		}
		
		_again: {}
		if ( p == eof ) {
			if ( host( "-", 1 ) ={ @@cs}= >= 35 )
			break;
		}
		else {
			switch ( _ruby_lexer_to_state_actions[host( "-", 1 ) ={ @@cs}=] ) {
				case 17 {
						host( "NONE", 1 ) ${${ts = nil;}$}$
					
					
					
				}
			}
			
			if ( host( "-", 1 ) ={ @@cs}= != 0 ) {
				p += 1;
				continue;
			}
		}
		break;
	}
}
host( "ext/pureruby/oga/native/lexer.rl", 68 ) @{

        @@lines = lines

        nil
      end

      # Resets the internal state of the lexer.
      def reset_native
        @@act   = 0;
        @@top   = 0;
        @@stack = Array.new(4, 0)
        @@cs    = self.class.ruby_lexer_start

        nil
      end

      # Calls back in to Ruby land passing the current token value along.
      #
      # This method calls back in to Ruby land based on the method name
      # specified in `name`. The Ruby callback should take one argument. This
      # argument will be a String containing the value of the current token.
      def callback(name, data, enc, ts, te)
        bytelist = data[ts, te - ts].pack('U*').force_encoding(enc)
        send(name, bytelist)
      end

      def callback_simple(name)
        send(name)
      end

      def html_script_p
        html_script?  # method not defined here
      end

      def html_style_p
        html_style?  # method not defined here
      end

      # Ragel generated code will reference class methods
      def method_missing(method, *args, **kwargs, &block)
        self.class.send(method, *args, **kwargs, &block)
      end
    end
  end
end

}@host( "ext/pureruby/oga/native/lexer.rl", 122 ) @{
}@