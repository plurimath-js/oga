
# line 1 "ext/pureruby/oga/native/lexer.rl"

# line 2 "ext/pureruby/oga/native/lexer.rl"

#
# Lexer support class for Ruby.
#
# The Lexer class contains the raw Ragel loop and calls back in to Ruby land
# whenever a Ragel action is needed similar to the C extension setup.
#
# This class requires Ruby land to first define the `Oga::XML` namespace.
#
module Oga
  module XML
    class Lexer
      
# line 19 "ext/pureruby/oga/native/lexer.rb"
class << self
	attr_accessor :_ruby_lexer_trans_keys
	private :_ruby_lexer_trans_keys, :_ruby_lexer_trans_keys=
end
self._ruby_lexer_trans_keys = [
	0, 0, 45, 100, 45, 45, 
	79, 111, 67, 99, 84, 
	116, 89, 121, 80, 112, 
	69, 101, 9, 32, 67, 67, 
	68, 68, 65, 65, 84, 
	84, 65, 65, 91, 91, 
	0, 127, 0, 127, 62, 62, 
	62, 62, 0, 127, 0, 
	127, 115, 115, 99, 99, 
	114, 114, 105, 105, 112, 112, 
	116, 116, 62, 62, 115, 
	115, 116, 116, 121, 121, 
	108, 108, 101, 101, 62, 62, 
	60, 60, 0, 127, 9, 
	32, 0, 127, 0, 127, 
	0, 127, 0, 127, 45, 45, 
	45, 45, 45, 45, 93, 
	93, 93, 93, 93, 93, 
	63, 63, 63, 63, 62, 62, 
	39, 39, 39, 39, 34, 
	34, 34, 34, 93, 93, 
	93, 93, 0, 127, 0, 127, 
	10, 10, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	62, 62, 0, 127, 0, 127, 
	0, 127, 0, 127, 9, 
	39, 10, 10, 9, 62, 
	9, 62, 34, 39, 0, 127, 
	0, 127, 10, 10, 62, 
	62, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	10, 10, 62, 62, 0, 
	127, 0, 127, 0, 127, 
	60, 60, 60, 60, 0, 127, 
	0, 127, 60, 60, 60, 
	60, 47, 60, 60, 60, 
	60, 60, 60, 60, 47, 60, 
	60, 60, 0
]

class << self
	attr_accessor :_ruby_lexer_key_spans
	private :_ruby_lexer_key_spans, :_ruby_lexer_key_spans=
end
self._ruby_lexer_key_spans = [
	0, 56, 1, 33, 33, 33, 33, 33, 
	33, 24, 1, 1, 1, 1, 1, 1, 
	128, 128, 1, 1, 128, 128, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 128, 24, 128, 128, 
	128, 128, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 128, 128, 1, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	1, 128, 128, 128, 128, 31, 1, 54, 
	54, 6, 128, 128, 1, 1, 128, 128, 
	128, 128, 128, 1, 1, 128, 128, 128, 
	1, 1, 128, 128, 1, 1, 14, 1, 
	1, 1, 14, 1
]

class << self
	attr_accessor :_ruby_lexer_index_offsets
	private :_ruby_lexer_index_offsets, :_ruby_lexer_index_offsets=
end
self._ruby_lexer_index_offsets = [
	0, 0, 57, 59, 93, 127, 161, 195, 
	229, 263, 288, 290, 292, 294, 296, 298, 
	300, 429, 558, 560, 562, 691, 820, 822, 
	824, 826, 828, 830, 832, 834, 836, 838, 
	840, 842, 844, 846, 848, 977, 1002, 1131, 
	1260, 1389, 1518, 1520, 1522, 1524, 1526, 1528, 
	1530, 1532, 1534, 1536, 1538, 1540, 1542, 1544, 
	1546, 1548, 1677, 1806, 1808, 1937, 2066, 2195, 
	2324, 2453, 2582, 2711, 2840, 2969, 3098, 3227, 
	3356, 3358, 3487, 3616, 3745, 3874, 3906, 3908, 
	3963, 4018, 4025, 4154, 4283, 4285, 4287, 4416, 
	4545, 4674, 4803, 4932, 4934, 4936, 5065, 5194, 
	5323, 5325, 5327, 5456, 5585, 5587, 5589, 5604, 
	5606, 5608, 5610, 5625
]

class << self
	attr_accessor :_ruby_lexer_indicies
	private :_ruby_lexer_indicies, :_ruby_lexer_indicies=
end
self._ruby_lexer_indicies = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	0, 4, 0, 5, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 5, 0, 6, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 6, 0, 7, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	0, 8, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 8, 0, 9, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 9, 0, 10, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 10, 0, 11, 
	11, 0, 0, 11, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 11, 0, 
	12, 0, 13, 0, 14, 0, 15, 0, 
	16, 0, 17, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 18, 18, 0, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 0, 0, 
	0, 0, 0, 0, 0, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 0, 
	0, 0, 0, 18, 0, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 19, 18, 18, 0, 
	0, 0, 0, 0, 18, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 21, 21, 20, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 20, 
	20, 20, 20, 20, 20, 20, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	20, 20, 20, 20, 21, 20, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	20, 20, 20, 20, 20, 21, 23, 22, 
	25, 24, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 26, 27, 
	27, 26, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 26, 26, 26, 26, 
	26, 26, 26, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 26, 26, 26, 
	26, 27, 26, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 26, 26, 26, 
	26, 26, 27, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	29, 29, 28, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 28, 28, 28, 
	28, 28, 28, 28, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 28, 28, 
	28, 28, 29, 28, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 28, 28, 
	28, 28, 28, 29, 31, 30, 32, 30, 
	33, 30, 34, 30, 35, 30, 36, 30, 
	37, 30, 39, 38, 40, 38, 41, 38, 
	42, 38, 43, 38, 44, 38, 46, 45, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 49, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 48, 48, 50, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 47, 47, 47, 47, 47, 51, 
	47, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 47, 47, 47, 47, 48, 
	47, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 48, 48, 48, 48, 48, 
	48, 48, 48, 47, 47, 47, 47, 47, 
	48, 11, 11, 52, 52, 11, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	11, 52, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 18, 
	18, 20, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 53, 20, 20, 20, 
	20, 20, 20, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 20, 20, 20, 
	20, 18, 20, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 20, 20, 20, 
	20, 20, 18, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	21, 21, 54, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 54, 54, 54, 
	54, 54, 54, 54, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 54, 54, 
	54, 54, 21, 54, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 54, 54, 
	54, 54, 54, 21, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 18, 18, 54, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 53, 54, 
	54, 54, 54, 54, 54, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 54, 
	54, 54, 54, 18, 54, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 55, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 54, 
	54, 54, 54, 54, 18, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 54, 18, 18, 54, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 53, 
	54, 54, 54, 54, 54, 54, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	54, 54, 54, 54, 18, 54, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 56, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	54, 54, 54, 54, 54, 18, 58, 57, 
	59, 57, 60, 59, 62, 61, 63, 61, 
	64, 63, 66, 65, 67, 65, 68, 67, 
	70, 69, 71, 69, 73, 72, 74, 72, 
	76, 75, 77, 75, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 79, 81, 80, 
	80, 82, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 79, 80, 83, 80, 
	80, 80, 80, 84, 80, 80, 80, 80, 
	80, 78, 78, 80, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 80, 80, 
	80, 80, 85, 80, 80, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 86, 78, 78, 87, 
	78, 78, 78, 78, 78, 78, 78, 88, 
	80, 80, 80, 78, 80, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 86, 78, 78, 87, 
	78, 78, 78, 78, 78, 78, 78, 80, 
	80, 80, 80, 80, 78, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 78, 78, 89, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 89, 
	89, 89, 89, 89, 89, 89, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	89, 89, 89, 89, 78, 89, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	89, 89, 89, 89, 89, 78, 81, 90, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 78, 78, 91, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 91, 91, 91, 91, 91, 91, 
	91, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 92, 78, 78, 
	78, 78, 78, 91, 91, 91, 91, 78, 
	91, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 92, 78, 78, 
	78, 78, 78, 91, 91, 91, 91, 91, 
	78, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 78, 78, 
	91, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 91, 91, 91, 91, 91, 
	91, 91, 78, 93, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 91, 91, 91, 91, 
	78, 91, 78, 93, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 91, 91, 91, 91, 
	91, 78, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 78, 
	78, 91, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 91, 91, 91, 91, 
	91, 91, 91, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 94, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 91, 91, 91, 
	91, 78, 91, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 94, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 91, 91, 91, 
	91, 91, 78, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	78, 78, 91, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 91, 91, 91, 
	91, 91, 91, 91, 78, 78, 78, 78, 
	78, 78, 78, 78, 95, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 91, 91, 
	91, 91, 78, 91, 78, 78, 78, 78, 
	78, 78, 78, 78, 95, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 91, 91, 
	91, 91, 91, 78, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 78, 78, 91, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 91, 91, 
	91, 91, 91, 91, 91, 78, 78, 96, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 91, 
	91, 91, 91, 78, 91, 78, 78, 96, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 91, 
	91, 91, 91, 91, 78, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 78, 78, 91, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 91, 
	91, 91, 91, 91, 91, 91, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 97, 78, 
	91, 91, 91, 91, 78, 91, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 97, 78, 
	91, 91, 91, 91, 91, 78, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 78, 78, 91, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	91, 91, 91, 91, 91, 91, 91, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 98, 78, 78, 78, 78, 78, 78, 
	78, 91, 91, 91, 91, 78, 91, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 98, 78, 78, 78, 78, 78, 78, 
	78, 91, 91, 91, 91, 91, 78, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 78, 78, 91, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 91, 91, 91, 91, 91, 91, 91, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 99, 78, 78, 78, 78, 
	78, 78, 91, 91, 91, 91, 78, 91, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 99, 78, 78, 78, 78, 
	78, 78, 91, 91, 91, 91, 91, 78, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 78, 78, 91, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 91, 91, 91, 91, 91, 91, 
	91, 78, 78, 78, 78, 100, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 91, 91, 91, 91, 78, 
	91, 78, 78, 78, 78, 100, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 91, 91, 91, 91, 91, 
	78, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 78, 78, 
	91, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 91, 91, 91, 91, 91, 
	91, 91, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 96, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 91, 91, 91, 91, 
	78, 91, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 96, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 91, 91, 91, 91, 
	91, 78, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 103, 102, 102, 102, 
	102, 104, 102, 102, 102, 102, 102, 101, 
	101, 102, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 102, 102, 102, 102, 
	102, 105, 102, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 102, 102, 102, 
	102, 101, 102, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 102, 102, 102, 
	102, 102, 101, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	106, 106, 106, 106, 106, 106, 106, 106, 
	107, 107, 106, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 106, 106, 106, 
	106, 106, 106, 106, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 106, 106, 
	106, 106, 107, 106, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 106, 106, 
	106, 106, 106, 107, 109, 108, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 110, 110, 80, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	80, 80, 80, 80, 80, 80, 80, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 80, 80, 80, 80, 110, 80, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 80, 80, 80, 80, 80, 110, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 110, 110, 111, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 112, 111, 111, 111, 111, 111, 111, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 111, 111, 111, 111, 110, 111, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 110, 110, 110, 110, 110, 110, 
	110, 110, 111, 111, 111, 111, 111, 110, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 113, 113, 114, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 114, 114, 114, 114, 115, 114, 
	114, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 114, 114, 114, 114, 113, 
	114, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 
	113, 113, 113, 114, 114, 114, 114, 114, 
	113, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 117, 117, 
	116, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 118, 116, 116, 116, 116, 
	116, 116, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 116, 116, 116, 116, 
	117, 116, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 116, 116, 116, 116, 
	116, 117, 120, 120, 119, 119, 121, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 119, 119, 119, 119, 119, 119, 119, 
	119, 120, 119, 122, 119, 119, 119, 119, 
	122, 119, 120, 123, 125, 125, 124, 124, 
	125, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 125, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 125, 124, 126, 126, 124, 124, 126, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 126, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	124, 124, 124, 124, 124, 124, 124, 124, 
	126, 124, 128, 127, 127, 127, 127, 129, 
	127, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 132, 131, 131, 133, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 131, 131, 
	131, 131, 131, 131, 131, 131, 130, 130, 
	134, 130, 130, 130, 130, 130, 130, 130, 
	130, 130, 130, 131, 131, 135, 136, 137, 
	131, 131, 130, 130, 130, 130, 130, 130, 
	130, 130, 130, 130, 130, 130, 130, 130, 
	130, 130, 130, 130, 130, 130, 130, 130, 
	130, 130, 130, 130, 131, 131, 131, 131, 
	130, 131, 130, 130, 130, 130, 130, 130, 
	130, 130, 130, 130, 130, 130, 130, 130, 
	130, 130, 130, 130, 130, 130, 130, 130, 
	130, 130, 130, 130, 131, 131, 131, 131, 
	131, 130, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 138, 
	138, 138, 138, 138, 138, 138, 138, 130, 
	130, 138, 130, 130, 130, 130, 130, 130, 
	130, 130, 130, 130, 139, 138, 138, 138, 
	138, 138, 138, 130, 130, 130, 130, 130, 
	130, 130, 130, 130, 130, 130, 130, 130, 
	130, 130, 130, 130, 130, 130, 130, 130, 
	130, 130, 130, 130, 130, 138, 138, 138, 
	138, 130, 138, 130, 130, 130, 130, 130, 
	130, 130, 130, 130, 130, 130, 130, 130, 
	130, 130, 130, 130, 130, 130, 130, 130, 
	130, 130, 130, 130, 130, 138, 138, 138, 
	138, 138, 130, 132, 140, 142, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 141, 141, 141, 141, 
	141, 141, 141, 141, 143, 143, 141, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 141, 141, 141, 141, 141, 141, 141, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 141, 141, 141, 141, 143, 141, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 141, 141, 141, 141, 141, 143, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 143, 143, 144, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 145, 144, 144, 144, 144, 144, 
	144, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 144, 144, 144, 144, 143, 
	144, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 143, 143, 143, 143, 143, 
	143, 143, 143, 144, 144, 144, 144, 144, 
	143, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 27, 27, 
	144, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 144, 144, 144, 144, 144, 
	144, 144, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 144, 144, 144, 144, 
	27, 144, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 144, 144, 144, 144, 
	144, 27, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 148, 147, 147, 149, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 147, 
	147, 147, 147, 147, 147, 147, 147, 146, 
	146, 150, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 147, 151, 152, 
	153, 147, 147, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 147, 147, 147, 
	147, 146, 147, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 147, 147, 147, 
	147, 147, 146, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	146, 146, 154, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 154, 154, 
	154, 154, 154, 154, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 154, 154, 
	154, 154, 146, 154, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 146, 146, 
	146, 146, 146, 146, 146, 146, 154, 154, 
	154, 154, 154, 146, 148, 155, 157, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 158, 158, 156, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 156, 156, 156, 156, 156, 156, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 158, 
	156, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 156, 156, 156, 156, 156, 
	158, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 158, 158, 
	159, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 160, 159, 159, 159, 159, 
	159, 159, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 159, 159, 159, 159, 
	158, 159, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 159, 159, 159, 159, 
	159, 158, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 29, 
	29, 159, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 159, 159, 159, 159, 
	159, 159, 159, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 159, 159, 159, 
	159, 29, 159, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 159, 159, 159, 
	159, 159, 29, 162, 161, 164, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	165, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 161, 161, 164, 161, 161, 165, 161, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 161, 161, 161, 161, 165, 161, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 161, 161, 161, 161, 161, 165, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 161, 161, 161, 
	161, 166, 161, 161, 161, 161, 161, 161, 
	161, 161, 161, 161, 161, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 161, 161, 164, 161, 161, 166, 
	161, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 161, 161, 161, 161, 166, 
	161, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 161, 161, 161, 161, 161, 
	166, 168, 167, 169, 167, 170, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 171, 169, 171, 169, 173, 172, 
	174, 172, 175, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 176, 
	174, 176, 174, 0
]

class << self
	attr_accessor :_ruby_lexer_trans_targs
	private :_ruby_lexer_trans_targs, :_ruby_lexer_trans_targs=
end
self._ruby_lexer_trans_targs = [
	35, 2, 3, 10, 35, 4, 5, 6, 
	7, 8, 9, 37, 11, 12, 13, 14, 
	15, 35, 38, 40, 35, 39, 42, 42, 
	45, 45, 82, 88, 89, 95, 100, 23, 
	24, 25, 26, 27, 28, 100, 104, 30, 
	31, 32, 33, 34, 104, 35, 36, 35, 
	35, 1, 35, 16, 35, 17, 35, 41, 
	38, 43, 44, 42, 18, 46, 47, 45, 
	19, 49, 50, 48, 48, 52, 51, 51, 
	54, 53, 53, 56, 55, 55, 58, 57, 
	0, 57, 59, 57, 57, 57, 60, 65, 
	57, 57, 57, 57, 61, 62, 63, 64, 
	58, 66, 67, 68, 69, 71, 70, 70, 
	70, 72, 70, 71, 70, 70, 74, 73, 
	73, 76, 75, 75, 75, 76, 75, 77, 
	77, 78, 77, 77, 80, 79, 79, 81, 
	81, 81, 83, 82, 82, 84, 85, 86, 
	82, 82, 82, 82, 82, 82, 82, 87, 
	82, 20, 90, 89, 89, 91, 92, 93, 
	89, 89, 89, 89, 89, 89, 94, 89, 
	21, 97, 99, 96, 98, 96, 96, 101, 
	102, 100, 22, 103, 105, 106, 104, 29, 
	107
]

class << self
	attr_accessor :_ruby_lexer_trans_actions
	private :_ruby_lexer_trans_actions, :_ruby_lexer_trans_actions=
end
self._ruby_lexer_trans_actions = [
	1, 0, 0, 0, 2, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 4, 5, 5, 6, 0, 7, 8, 
	9, 10, 11, 0, 12, 0, 13, 0, 
	0, 0, 0, 0, 0, 14, 15, 0, 
	0, 0, 0, 0, 16, 19, 20, 21, 
	22, 0, 23, 0, 24, 0, 25, 5, 
	26, 3, 27, 28, 0, 3, 27, 29, 
	0, 3, 3, 30, 31, 3, 32, 33, 
	3, 34, 35, 3, 36, 37, 38, 39, 
	0, 40, 0, 41, 42, 43, 0, 0, 
	44, 45, 46, 47, 0, 0, 0, 0, 
	48, 0, 0, 0, 0, 3, 49, 50, 
	51, 3, 52, 0, 53, 54, 0, 55, 
	56, 3, 57, 58, 59, 0, 60, 61, 
	62, 3, 63, 64, 0, 65, 66, 67, 
	68, 69, 0, 70, 71, 0, 0, 0, 
	72, 73, 74, 75, 76, 77, 78, 20, 
	79, 0, 0, 80, 81, 0, 0, 0, 
	82, 83, 84, 85, 86, 87, 20, 88, 
	0, 3, 89, 90, 89, 91, 92, 3, 
	27, 93, 0, 3, 3, 27, 94, 0, 
	3
]

class << self
	attr_accessor :_ruby_lexer_to_state_actions
	private :_ruby_lexer_to_state_actions, :_ruby_lexer_to_state_actions=
end
self._ruby_lexer_to_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 17, 0, 0, 0, 0, 
	0, 0, 17, 0, 0, 17, 0, 0, 
	17, 0, 0, 17, 0, 17, 0, 17, 
	0, 17, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 0, 
	0, 17, 0, 17, 0, 17, 0, 17, 
	0, 17, 17, 0, 0, 0, 0, 0, 
	0, 17, 0, 0, 0, 0, 0, 0, 
	17, 0, 0, 0, 17, 0, 0, 0, 
	17, 0, 0, 0
]

class << self
	attr_accessor :_ruby_lexer_from_state_actions
	private :_ruby_lexer_from_state_actions, :_ruby_lexer_from_state_actions=
end
self._ruby_lexer_from_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 18, 0, 0, 0, 0, 
	0, 0, 18, 0, 0, 18, 0, 0, 
	18, 0, 0, 18, 0, 18, 0, 18, 
	0, 18, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 18, 0, 
	0, 18, 0, 18, 0, 18, 0, 18, 
	0, 18, 18, 0, 0, 0, 0, 0, 
	0, 18, 0, 0, 0, 0, 0, 0, 
	18, 0, 0, 0, 18, 0, 0, 0, 
	18, 0, 0, 0
]

class << self
	attr_accessor :_ruby_lexer_eof_trans
	private :_ruby_lexer_eof_trans, :_ruby_lexer_eof_trans=
end
self._ruby_lexer_eof_trans = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 21, 23, 25, 27, 29, 31, 31, 
	31, 31, 31, 31, 31, 39, 39, 39, 
	39, 39, 39, 0, 48, 53, 21, 55, 
	55, 55, 0, 60, 60, 0, 64, 64, 
	0, 68, 68, 0, 72, 0, 75, 0, 
	78, 0, 90, 91, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 0, 107, 
	109, 0, 112, 0, 117, 0, 124, 0, 
	127, 0, 0, 139, 141, 142, 142, 145, 
	145, 0, 155, 156, 157, 157, 160, 160, 
	0, 164, 164, 164, 0, 170, 170, 170, 
	0, 175, 175, 175
]

class << self
	attr_accessor :ruby_lexer_start
end
self.ruby_lexer_start = 35;
class << self
	attr_accessor :ruby_lexer_error
end
self.ruby_lexer_error = 0;

class << self
	attr_accessor :ruby_lexer_en_comment_body
end
self.ruby_lexer_en_comment_body = 42;
class << self
	attr_accessor :ruby_lexer_en_cdata_body
end
self.ruby_lexer_en_cdata_body = 45;
class << self
	attr_accessor :ruby_lexer_en_proc_ins_body
end
self.ruby_lexer_en_proc_ins_body = 48;
class << self
	attr_accessor :ruby_lexer_en_string_squote
end
self.ruby_lexer_en_string_squote = 51;
class << self
	attr_accessor :ruby_lexer_en_string_dquote
end
self.ruby_lexer_en_string_dquote = 53;
class << self
	attr_accessor :ruby_lexer_en_doctype_inline
end
self.ruby_lexer_en_doctype_inline = 55;
class << self
	attr_accessor :ruby_lexer_en_doctype
end
self.ruby_lexer_en_doctype = 57;
class << self
	attr_accessor :ruby_lexer_en_xml_decl
end
self.ruby_lexer_en_xml_decl = 70;
class << self
	attr_accessor :ruby_lexer_en_element_name
end
self.ruby_lexer_en_element_name = 73;
class << self
	attr_accessor :ruby_lexer_en_element_close
end
self.ruby_lexer_en_element_close = 75;
class << self
	attr_accessor :ruby_lexer_en_attribute_pre
end
self.ruby_lexer_en_attribute_pre = 77;
class << self
	attr_accessor :ruby_lexer_en_unquoted_attribute_value
end
self.ruby_lexer_en_unquoted_attribute_value = 79;
class << self
	attr_accessor :ruby_lexer_en_quoted_attribute_value
end
self.ruby_lexer_en_quoted_attribute_value = 81;
class << self
	attr_accessor :ruby_lexer_en_element_head
end
self.ruby_lexer_en_element_head = 82;
class << self
	attr_accessor :ruby_lexer_en_html_element_head
end
self.ruby_lexer_en_html_element_head = 89;
class << self
	attr_accessor :ruby_lexer_en_text
end
self.ruby_lexer_en_text = 96;
class << self
	attr_accessor :ruby_lexer_en_html_script
end
self.ruby_lexer_en_html_script = 100;
class << self
	attr_accessor :ruby_lexer_en_html_style
end
self.ruby_lexer_en_html_style = 104;
class << self
	attr_accessor :ruby_lexer_en_main
end
self.ruby_lexer_en_main = 35;


# line 15 "ext/pureruby/oga/native/lexer.rl"

      # Runs the bulk of the Ragel loop and calls back in to Ruby.
      #
      # This method pulls its data in from the instance variable `@data`. The
      # Ruby side of the Lexer class should set this variable to a String in its
      # constructor method. Encodings are passed along to make sure that token
      # values share the same encoding as the input.
      #
      # This method always returns nil.
    
      def advance_native(rb_str)
        html_p = html?

        encoding = rb_str.encoding

        data  = rb_str.chars.map(&:ord)
        ts    = 0
        te    = 0
        p     = 0
        mark  = 0
        lines = @lines || 0
        pe    = data.length
        eof   = data.length

        id_advance_line        = "advance_line"
        id_on_attribute        = "on_attribute"
        id_on_attribute_ns     = "on_attribute_ns"
        id_on_cdata_start      = "on_cdata_start"
        id_on_cdata_body       = "on_cdata_body"
        id_on_cdata_end        = "on_cdata_end"
        id_on_comment_start    = "on_comment_start"
        id_on_comment_body     = "on_comment_body"
        id_on_comment_end      = "on_comment_end"
        id_on_doctype_end      = "on_doctype_end"
        id_on_doctype_inline   = "on_doctype_inline"
        id_on_doctype_name     = "on_doctype_name"
        id_on_doctype_start    = "on_doctype_start"
        id_on_doctype_type     = "on_doctype_type"
        id_on_element_end      = "on_element_end"
        id_on_element_name     = "on_element_name"
        id_on_element_ns       = "on_element_ns"
        id_on_element_open_end = "on_element_open_end"
        id_on_proc_ins_end     = "on_proc_ins_end"
        id_on_proc_ins_name    = "on_proc_ins_name"
        id_on_proc_ins_start   = "on_proc_ins_start"
        id_on_proc_ins_body    = "on_proc_ins_body"
        id_on_string_body      = "on_string_body"
        id_on_string_dquote    = "on_string_dquote"
        id_on_string_squote    = "on_string_squote"
        id_on_text             = "on_text"
        id_on_xml_decl_end     = "on_xml_decl_end"
        id_on_xml_decl_start   = "on_xml_decl_start"

        
# line 1086 "ext/pureruby/oga/native/lexer.rb"
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if  @cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	case _ruby_lexer_from_state_actions[ @cs] 
	when 18 then
# line 1 "NONE"
		begin
ts = p
		end
# line 1114 "ext/pureruby/oga/native/lexer.rb"
	end
	_keys =  @cs << 1
	_inds = _ruby_lexer_index_offsets[ @cs]
	_slen = _ruby_lexer_key_spans[ @cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_ruby_lexer_trans_keys[_keys] <= _wide && 
			_wide <= _ruby_lexer_trans_keys[_keys + 1] 
		    ) then
			_ruby_lexer_indicies[ _inds + _wide - _ruby_lexer_trans_keys[_keys] ] 
		 else 
			_ruby_lexer_indicies[ _inds + _slen ]
		 end
	end
	if _goto_level <= _eof_trans
	 @cs = _ruby_lexer_trans_targs[_trans]
	if _ruby_lexer_trans_actions[_trans] != 0
	case _ruby_lexer_trans_actions[_trans]
	when 3 then
# line 61 "ext/ragel/base_lexer_rubified.rl"
		begin

        
        if  data[p].ord == 10 
lines += 1
end
    		end
	when 20 then
# line 1 "NONE"
		begin
te = p+1
		end
	when 8 then
# line 111 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
            callback_simple(id_on_comment_end);

             @cs = 35;
         end
		end
	when 28 then
# line 99 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1; begin 
            callback(id_on_comment_body, data, encoding, ts, te);

            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end
         end
		end
	when 7 then
# line 99 "ext/ragel/base_lexer_rubified.rl"
		begin
 begin p = ((te))-1; end
 begin 
            callback(id_on_comment_body, data, encoding, ts, te);

            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end
         end
		end
	when 10 then
# line 151 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
            callback_simple(id_on_cdata_end);

             @cs = 35;
         end
		end
	when 29 then
# line 139 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1; begin 
            callback(id_on_cdata_body, data, encoding, ts, te);

            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end
         end
		end
	when 9 then
# line 139 "ext/ragel/base_lexer_rubified.rl"
		begin
 begin p = ((te))-1; end
 begin 
            callback(id_on_cdata_body, data, encoding, ts, te);

            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end
         end
		end
	when 31 then
# line 195 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
            callback_simple(id_on_proc_ins_end);

             @cs = 35;
         end
		end
	when 30 then
# line 183 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1; begin 
            callback(id_on_proc_ins_body, data, encoding, ts, te);

            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end
         end
		end
	when 32 then
# line 238 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
            callback_simple(id_on_string_squote);

            	begin
		 @top -= 1
		 @cs =  @stack[ @top]
		_goto_level = _again
		next
	end

         end
		end
	when 33 then
# line 211 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1; begin 
        callback(id_on_string_body, data, encoding, ts, te);

        if  lines > 0 

            advance_line(lines);

            lines = 0;
        
end
     end
		end
	when 34 then
# line 248 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
            callback_simple(id_on_string_dquote);

            	begin
		 @top -= 1
		 @cs =  @stack[ @top]
		_goto_level = _again
		next
	end

         end
		end
	when 35 then
# line 211 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1; begin 
        callback(id_on_string_body, data, encoding, ts, te);

        if  lines > 0 

            advance_line(lines);

            lines = 0;
        
end
     end
		end
	when 36 then
# line 295 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin   @cs = 57;  end
		end
	when 37 then
# line 283 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1; begin 
            callback(id_on_doctype_inline, data, encoding, ts, te);

            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end
         end
		end
	when 44 then
# line 306 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin   @cs = 55;  end
		end
	when 42 then
# line 223 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
        callback_simple(id_on_string_squote);

        	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 51
		_goto_level = _again
		next
	end

     end
		end
	when 41 then
# line 229 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
        callback_simple(id_on_string_dquote);

        	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 53
		_goto_level = _again
		next
	end

     end
		end
	when 43 then
# line 316 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
            callback_simple(id_on_doctype_end);
             @cs = 35;
         end
		end
	when 40 then
# line 68 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
        advance_line(1);
     end
		end
	when 39 then
# line 323 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
		end
	when 47 then
# line 312 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1; begin 
            callback(id_on_doctype_name, data, encoding, ts, te);
         end
		end
	when 46 then
# line 68 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1; begin 
        advance_line(1);
     end
		end
	when 45 then
# line 1 "NONE"
		begin
	case  @act
	when 13 then
	begin begin p = ((te))-1; end

            callback(id_on_doctype_type, data, encoding, ts, te);
        end
	when 17 then
	begin begin p = ((te))-1; end

            callback(id_on_doctype_name, data, encoding, ts, te);
        end
end 
			end
	when 54 then
# line 340 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end

            callback_simple(id_on_xml_decl_end);

             @cs = 35;
         end
		end
	when 52 then
# line 355 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1; begin 
            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end

            callback(id_on_attribute, data, encoding, ts, te);
         end
		end
	when 53 then
# line 370 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1;		end
	when 56 then
# line 407 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
            if  !html_p 

                callback(id_on_element_ns, data, encoding, ts, te - 1);
            
end
         end
		end
	when 55 then
# line 415 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1; begin 
            callback(id_on_element_name, data, encoding, ts, te);

            if  html_p 

                 @cs = 89;
            
else

                 @cs = 82;
            
end
         end
		end
	when 60 then
# line 434 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
		end
	when 59 then
# line 391 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1; begin 
        callback(id_on_element_end, data, encoding, ts, te);
     end
		end
	when 63 then
# line 458 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
            p = p - 1;

            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end

             @cs = 81;
         end
		end
	when 61 then
# line 472 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
            p = p - 1;

            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end

            if  html_p 

                 @cs = 79;
            
else

                	begin
		 @top -= 1
		 @cs =  @stack[ @top]
		_goto_level = _again
		next
	end

            
end
         end
		end
	when 64 then
# line 456 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1;		end
	when 65 then
# line 72 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
        p = p - 1;
        	begin
		 @top -= 1
		 @cs =  @stack[ @top]
		_goto_level = _again
		next
	end

     end
		end
	when 66 then
# line 511 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1; begin 
            callback_simple(id_on_string_squote);

            callback(id_on_string_body, data, encoding, ts, te);

            callback_simple(id_on_string_squote);
         end
		end
	when 69 then
# line 527 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
            callback_simple(id_on_string_squote);

             @cs = 51;
         end
		end
	when 68 then
# line 533 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
            callback_simple(id_on_string_dquote);

             @cs = 53;
         end
		end
	when 67 then
# line 72 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
        p = p - 1;
        	begin
		 @top -= 1
		 @cs =  @stack[ @top]
		_goto_level = _again
		next
	end

     end
		end
	when 71 then
# line 68 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
        advance_line(1);
     end
		end
	when 75 then
# line 575 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
            callback(id_on_attribute_ns, data, encoding, ts, te - 1);
         end
		end
	when 72 then
# line 542 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
        	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 77
		_goto_level = _again
		next
	end

     end
		end
	when 73 then
# line 585 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
            callback_simple(id_on_element_open_end);

             @cs = 35;
         end
		end
	when 78 then
# line 564 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
        callback_simple(id_on_element_end);
         @cs = 35;
     end
		end
	when 70 then
# line 593 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
		end
	when 76 then
# line 68 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1; begin 
        advance_line(1);
     end
		end
	when 79 then
# line 572 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1;		end
	when 74 then
# line 579 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1; begin 
            callback(id_on_attribute, data, encoding, ts, te);
         end
		end
	when 77 then
# line 593 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1;		end
	when 11 then
# line 572 "ext/ragel/base_lexer_rubified.rl"
		begin
 begin p = ((te))-1; end
		end
	when 81 then
# line 68 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
        advance_line(1);
     end
		end
	when 82 then
# line 542 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
        	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 77
		_goto_level = _again
		next
	end

     end
		end
	when 83 then
# line 608 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
            callback_simple(id_on_element_open_end);

            if  html_script_p() 

                 @cs = 100;
            
elsif  html_style_p() 

                 @cs = 104;
            
else

                 @cs = 35;
            
end
         end
		end
	when 87 then
# line 564 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
        callback_simple(id_on_element_end);
         @cs = 35;
     end
		end
	when 80 then
# line 628 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
		end
	when 85 then
# line 68 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1; begin 
        advance_line(1);
     end
		end
	when 88 then
# line 600 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1;		end
	when 84 then
# line 602 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1; begin 
            callback(id_on_attribute, data, encoding, ts, te);
         end
		end
	when 86 then
# line 628 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1;		end
	when 12 then
# line 600 "ext/ragel/base_lexer_rubified.rl"
		begin
 begin p = ((te))-1; end
		end
	when 92 then
# line 666 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
            callback(id_on_text, data, encoding, ts, te);

            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end

             @cs = 35;
         end
		end
	when 91 then
# line 681 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
            callback(id_on_text, data, encoding, ts, mark);

            p    = mark - 1;
            mark = 0;

            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end

             @cs = 35;
         end
		end
	when 90 then
# line 666 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1; begin 
            callback(id_on_text, data, encoding, ts, te);

            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end

             @cs = 35;
         end
		end
	when 14 then
# line 395 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
        callback_simple(id_on_element_end);

         @cs = 35;
     end
		end
	when 93 then
# line 653 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1; begin 
        callback(id_on_text, data, encoding, ts, te);

        if  lines > 0 

            advance_line(lines);

            lines = 0;
        
end
     end
		end
	when 13 then
# line 653 "ext/ragel/base_lexer_rubified.rl"
		begin
 begin p = ((te))-1; end
 begin 
        callback(id_on_text, data, encoding, ts, te);

        if  lines > 0 

            advance_line(lines);

            lines = 0;
        
end
     end
		end
	when 16 then
# line 395 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
        callback_simple(id_on_element_end);

         @cs = 35;
     end
		end
	when 94 then
# line 653 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1; begin 
        callback(id_on_text, data, encoding, ts, te);

        if  lines > 0 

            advance_line(lines);

            lines = 0;
        
end
     end
		end
	when 15 then
# line 653 "ext/ragel/base_lexer_rubified.rl"
		begin
 begin p = ((te))-1; end
 begin 
        callback(id_on_text, data, encoding, ts, te);

        if  lines > 0 

            advance_line(lines);

            lines = 0;
        
end
     end
		end
	when 2 then
# line 92 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
        callback_simple(id_on_comment_start);

         @cs = 42;
     end
		end
	when 4 then
# line 132 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
        callback_simple(id_on_cdata_start);

         @cs = 45;
     end
		end
	when 22 then
# line 382 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
        p = p - 1;
         @cs = 73;
     end
		end
	when 23 then
# line 387 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
         @cs = 75;
     end
		end
	when 19 then
# line 639 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
        p = p - 1;
         @cs = 96;
     end
		end
	when 24 then
# line 267 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1; begin 
        callback_simple(id_on_doctype_start);

        if  lines > 0 

            advance_line(lines);

            lines = 0;
        
end

         @cs = 57;
     end
		end
	when 25 then
# line 175 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1; begin 
        callback_simple(id_on_proc_ins_start);
        callback(id_on_proc_ins_name, data, encoding, ts + 2, te);

         @cs = 48;
     end
		end
	when 21 then
# line 639 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p
p = p - 1; begin 
        p = p - 1;
         @cs = 96;
     end
		end
	when 1 then
# line 639 "ext/ragel/base_lexer_rubified.rl"
		begin
 begin p = ((te))-1; end
 begin 
        p = p - 1;
         @cs = 96;
     end
		end
	when 6 then
# line 1 "NONE"
		begin
	case  @act
	when 62 then
	begin begin p = ((te))-1; end

        callback_simple(id_on_xml_decl_start);
         @cs = 70;
    end
	when 65 then
	begin begin p = ((te))-1; end

        callback_simple(id_on_proc_ins_start);
        callback(id_on_proc_ins_name, data, encoding, ts + 2, te);

         @cs = 48;
    end
end 
			end
	when 89 then
# line 61 "ext/ragel/base_lexer_rubified.rl"
		begin

        
        if  data[p].ord == 10 
lines += 1
end
    		end
# line 681 "ext/ragel/base_lexer_rubified.rl"
		begin
 mark = p; 		end
	when 49 then
# line 61 "ext/ragel/base_lexer_rubified.rl"
		begin

        
        if  data[p].ord == 10 
lines += 1
end
    		end
# line 370 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
		end
	when 57 then
# line 61 "ext/ragel/base_lexer_rubified.rl"
		begin

        
        if  data[p].ord == 10 
lines += 1
end
    		end
# line 450 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
		end
	when 62 then
# line 61 "ext/ragel/base_lexer_rubified.rl"
		begin

        
        if  data[p].ord == 10 
lines += 1
end
    		end
# line 456 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
		end
	when 27 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 61 "ext/ragel/base_lexer_rubified.rl"
		begin

        
        if  data[p].ord == 10 
lines += 1
end
    		end
	when 48 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 301 "ext/ragel/base_lexer_rubified.rl"
		begin
 @act = 13;		end
	when 38 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 312 "ext/ragel/base_lexer_rubified.rl"
		begin
 @act = 17;		end
	when 26 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 333 "ext/ragel/base_lexer_rubified.rl"
		begin
 @act = 62;		end
	when 5 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 175 "ext/ragel/base_lexer_rubified.rl"
		begin
 @act = 65;		end
	when 51 then
# line 223 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
        callback_simple(id_on_string_squote);

        	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 51
		_goto_level = _again
		next
	end

     end
		end
# line 61 "ext/ragel/base_lexer_rubified.rl"
		begin

        
        if  data[p].ord == 10 
lines += 1
end
    		end
	when 50 then
# line 229 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
        callback_simple(id_on_string_dquote);

        	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 53
		_goto_level = _again
		next
	end

     end
		end
# line 61 "ext/ragel/base_lexer_rubified.rl"
		begin

        
        if  data[p].ord == 10 
lines += 1
end
    		end
	when 58 then
# line 438 "ext/ragel/base_lexer_rubified.rl"
		begin
te = p+1
 begin 
            if  lines > 0 

                advance_line(lines);

                lines = 0;
            
end

             @cs = 35;
         end
		end
# line 61 "ext/ragel/base_lexer_rubified.rl"
		begin

        
        if  data[p].ord == 10 
lines += 1
end
    		end
# line 2236 "ext/pureruby/oga/native/lexer.rb"
	end
	end
	end
	if _goto_level <= _again
	case _ruby_lexer_to_state_actions[ @cs] 
	when 17 then
# line 1 "NONE"
		begin
ts = nil;		end
# line 2246 "ext/pureruby/oga/native/lexer.rb"
	end

	if  @cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	if _ruby_lexer_eof_trans[ @cs] > 0
		_trans = _ruby_lexer_eof_trans[ @cs] - 1;
		_goto_level = _eof_trans
		next;
	end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

# line 69 "ext/pureruby/oga/native/lexer.rl"

        @lines = lines

        nil
      end

      # Resets the internal state of the lexer.
      def reset_native
        @act   = 0;
        @top   = 0;
        @stack = Array.new(4, 0)
        @cs    = self.class.ruby_lexer_start

        nil
      end

      # Calls back in to Ruby land passing the current token value along.
      #
      # This method calls back in to Ruby land based on the method name
      # specified in `name`. The Ruby callback should take one argument. This
      # argument will be a String containing the value of the current token.
      def callback(name, data, enc, ts, te)
        bytelist = data[ts, te - ts].pack('U*').force_encoding(enc)
        send(name, bytelist)
      end

      def callback_simple(name)
        send(name)
      end

      def html_script_p
        html_script?  # method not defined here
      end

      def html_style_p
        html_style?  # method not defined here
      end

      # Ragel generated code will reference class methods
      def method_missing(method, *args, **kwargs, &block)
        self.class.send(method, *args, **kwargs, &block)
      end
    end
  end
end


# line 122 "ext/pureruby/oga/native/lexer.rl"

